{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nico\\\\Documents\\\\GitHub\\\\quarkchainposwapp\\\\app\\\\src\\\\App.js\";\nimport './App.css';\nimport axios from 'axios';\nimport Web3 from 'web3';\nimport QuarkChain from 'quarkchain-web3';\nimport Async from 'react-async'; //import Aync from 'react-async';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet web3;\nlet address;\nlet ABIinterface;\nconst poolContractAddress = \"0x006631C067D34928F55520511f01A5aBfA0AC67a\";\nconst fullShardKey = \"0003c66C\";\nconst jrpcUrl = \"http://jrpc.mainnet.quarkchain.io:38391\";\n\nif (window.ethereum) {\n  web3 = new Web3(window.ethereum);\n  QuarkChain.injectWeb3(web3, jrpcUrl);\n  window.ethereum.enable();\n  getUserInformation().address.then(data => console.log(data));\n}\n\nconst userInfo = () => /*#__PURE__*/_jsxDEV(Async, {\n  promiseFn: getUserInformation(),\n  children: /*#__PURE__*/_jsxDEV(Async.Resolved, {\n    children: data => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 25,\n  columnNumber: 3\n}, this);\n\nfunction App() {\n  let address;\n  let balance;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"QKC Chain3 staking pool\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), \"Address: \", userInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this);\n}\n\n_c = App;\n\nfunction sendTransaction(address, value) {\n  let rawTx = {\n    to: poolContractAddress,\n    fromFullShardKey: \"0x\" + fullShardKey,\n    toFullShardKey: \"0x\" + fullShardKey,\n    gas: String(500000).toString(\"hex\"),\n    gasPrice: String\n  };\n}\n\nfunction getBalance() {\n  web3.qkc.getBalance(poolContractAddress + fullShardKey, function (err, res) {\n    console.log(res.c[1]);\n    return res / 10 ** 18;\n  });\n}\n\nasync function getContractInformation(address) {\n  let contract = web3.qkc.contract(ABIinterface).at(address);\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        balance: web3.qkc.getBalance(address, function (err, res) {\n          console.log(res.c[1]);\n          return res / 10 ** 18;\n        }),\n        status: contract.isClosed.call(function (err, res) {\n          if (res == false) {\n            return \"Open\";\n          }\n\n          if (res == true) {\n            return \"Closed\";\n          }\n        })\n      });\n    }, 10000);\n  });\n}\n\nasync function getUserInformation() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        address: web3.eth.getAccounts()[0]\n      });\n    }, 10000);\n  });\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Nico/Documents/GitHub/quarkchainposwapp/app/src/App.js"],"names":["axios","Web3","QuarkChain","Async","web3","address","ABIinterface","poolContractAddress","fullShardKey","jrpcUrl","window","ethereum","injectWeb3","enable","getUserInformation","then","data","console","log","userInfo","App","balance","sendTransaction","value","rawTx","to","fromFullShardKey","toFullShardKey","gas","String","toString","gasPrice","getBalance","qkc","err","res","c","getContractInformation","contract","at","Promise","resolve","setTimeout","status","isClosed","call","eth","getAccounts"],"mappings":"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","sourcesContent":["import './App.css';\nimport axios from 'axios';\nimport Web3 from 'web3';\nimport QuarkChain from 'quarkchain-web3';\nimport Async from 'react-async';\n//import Aync from 'react-async';\n\nlet web3;\nlet address;\n\nlet ABIinterface\n\nconst poolContractAddress = \"0x006631C067D34928F55520511f01A5aBfA0AC67a\";\nconst fullShardKey = \"0003c66C\"\nconst jrpcUrl = \"http://jrpc.mainnet.quarkchain.io:38391\";\n\nif(window.ethereum){\n  web3 = new Web3(window.ethereum);\n  QuarkChain.injectWeb3(web3, jrpcUrl);\n  window.ethereum.enable();\n  getUserInformation().address.then(data => console.log(data))\n}\n\nconst userInfo = () => (\n  <Async promiseFn={getUserInformation()}>\n    <Async.Resolved>\n      {data => (\n        <p>{data.address}</p>\n      )}\n    </Async.Resolved>\n  </Async>\n)\n\nfunction App() {\n  let address;\n  let balance;\n\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>QKC Chain3 staking pool</h2>\n          Address: {userInfo}\n        </header>\n      </div>\n  );\n}\n\nfunction sendTransaction(address, value) {\n  let rawTx = {\n    to: poolContractAddress,\n    fromFullShardKey: \"0x\"+fullShardKey,\n    toFullShardKey: \"0x\"+fullShardKey,\n    gas: String(500000).toString(\"hex\"),\n    gasPrice: String\n  }\n  \n}\n\nfunction getBalance() {\n  web3.qkc.getBalance(poolContractAddress + fullShardKey, function(err, res) {\n    console.log(res.c[1])\n    return res/10**18\n  });\n}\nasync function getContractInformation(address) {\n  let contract = web3.qkc.contract(ABIinterface).at(address);\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        balance: web3.qkc.getBalance(address, function(err, res) {\n          console.log(res.c[1])\n          return res/10**18\n        }),\n        status: contract.isClosed.call(function(err, res){\n          if(res == false){\n            return\"Open\";\n          }\n          if(res == true){\n            return \"Closed\";\n          }\n        })\n\n      })\n    }, 10000)\n  })\n}\n\nasync function getUserInformation() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        address: web3.eth.getAccounts()[0]\n      })\n    }, 10000)\n  })\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}