{"ast":null,"code":"import Web3 from 'web3';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://mainnet.quarkchain.io';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\nasync function generateTx(to, data, value, from = null) {\n  if (from === null) {\n    from = this.address;\n  }\n\n  const transactionCountResp = await axios.post(\"/getTransactionCount\", {\n    address: from\n  });\n  const fromFullShardKey = \"0x\" + from.slice(-8);\n  let toRecipient;\n  let toFullShardKey;\n\n  if (to !== \"\") {\n    toRecipient = to.slice(0, 42);\n    toFullShardKey = \"0x\" + to.slice(42);\n  } else {\n    toRecipient = \"\";\n    toFullShardKey = fromFullShardKey;\n  }\n\n  const rawTx = {\n    nonce: transactionCountResp.data.transactionCount,\n    from: from.slice(0, 42),\n    to: toRecipient,\n    gasPrice: \"0x\" + 2 .toString(16),\n    gas: \"0x\" + 350000 .toString(16),\n    value: \"0x\" + value.toString(16),\n    data,\n    fromFullShardKey,\n    toFullShardKey,\n    networkId: `0x${1 .toString(16)}`,\n    gasTokenId: `0x${this.gasTokenId.toString(16)}`,\n    transferTokenId: `0x${this.transferTokenId.toString(16)}`\n  };\n}\n\nasync function signAndSendTx(rawTx) {\n  let txId = '';\n\n  try {\n    txId = await this.qPocketSignAndSendTx(rawTx);\n  } catch (error) {\n    console.log(\"error 404\");\n    return;\n  }\n\n  txId = txId;\n  const success = !!txId && !txId.startsWith('0x000000000000000000000000000000000000000');\n\n  if (success) {\n    //const url = (<a href=\"/tx/${txId}\">${txId}</a>);\n    console.log(`Successfully sent transaction ${txId}.`);\n  } else {\n    console.log(\"Sending transaction failed\", 7000);\n  }\n}\n\nasync function metaMaskSignTyped(tx, web3, from) {\n  console.log(\"Awaiting MetaMask signature confirmation...\");\n  const transactionCountResp = await axios.get(\"/networkInfo\");\n  console.log(transactionCountResp);\n  return new Promise(function (resolve, reject) {\n    var params = [getTypedTx(tx), from];\n    var method = 'eth_signTypedData';\n    web3.currentProvider.sendAsync({\n      method,\n      params,\n      from\n    }, function (err, result) {\n      if (result.error !== undefined) {\n        console.log(\"It looks you declined the transaction in MetaMask\");\n        console.log(result.error);\n      }\n\n      resolve(result.result);\n    });\n  }.bind(this));\n}\n\nasync function sendRawTx(rawTx) {\n  let txResp;\n  console.log(\"test\");\n\n  try {\n    txResp = await axios.post(\"/sendRawTx\", {\n      rawTx: rawTx\n    });\n    console.log(\"txResp: \" + txResp);\n  } catch (error) {\n    console.log(\"Sending transaction failed\");\n  }\n}\n\nfunction getDeviceType() {\n  var ua = navigator.userAgent,\n      isWindowsPhone = /(?:Windows Phone)/.test(ua),\n      isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone,\n      isAndroid = /(?:Android)/.test(ua),\n      isFireFox = /(?:Firefox)/.test(ua),\n      isChrome = /(?:Chrome|CriOS)/.test(ua),\n      isTablet = /(?:iPad|PlayBook)/.test(ua) || isAndroid && !/(?:Mobile)/.test(ua) || isFireFox && /(?:Tablet)/.test(ua),\n      isPhone = /(?:iPhone)/.test(ua) && !isTablet,\n      isPc = !isPhone && !isAndroid && !isSymbian;\n  return {\n    isPhone,\n    isPc\n  };\n}\n\nfunction getTypedTx(tx) {\n  let msgParams = [{\n    type: 'uint256',\n    name: 'nonce',\n    value: `0x${tx.nonce.toString(16)}`\n  }, {\n    type: 'uint256',\n    name: 'gasPrice',\n    value: `0x${tx.gasPrice.toString(16)}`\n  }, {\n    type: 'uint256',\n    name: 'gasLimit',\n    value: `0x${tx.gasLimit.toString(16)}`\n  }, {\n    type: 'uint160',\n    name: 'to',\n    value: `${tx.to}`\n  }, {\n    type: 'uint256',\n    name: 'value',\n    value: `0x${tx.value.toString(16)}`\n  }, {\n    type: 'bytes',\n    name: 'data',\n    value: `0x${tx.data.toString(16)}`\n  }, {\n    type: 'uint256',\n    name: 'networkId',\n    value: '0x1'\n  }, {\n    type: 'uint32',\n    name: 'fromFullShardKey',\n    value: `${tx.fromFullShardKey}`\n  }, {\n    type: 'uint32',\n    name: 'toFullShardKey',\n    value: `${tx.toFullShardKey}`\n  }, {\n    type: 'uint64',\n    name: 'gasTokenId',\n    value: '0x8bb0'\n  }, {\n    \"type\": 'uint64',\n    \"name\": 'transferTokenId',\n    \"value\": '0x8bb0'\n  }, {\n    \"type\": 'string',\n    \"name\": 'qkcDomain',\n    \"value\": 'bottom-quark'\n  }];\n  console.log(msgParams);\n  return msgParams;\n}\n\nexport { metaMaskSignTyped, getTypedTx, getDeviceType, sendRawTx };","map":{"version":3,"sources":["C:/Users/Nico/Documents/GitHub/quarkchainposwapp/app/src/functionCol/lib.js"],"names":["Web3","axios","defaults","baseURL","headers","post","generateTx","to","data","value","from","address","transactionCountResp","fromFullShardKey","slice","toRecipient","toFullShardKey","rawTx","nonce","transactionCount","gasPrice","toString","gas","networkId","gasTokenId","transferTokenId","signAndSendTx","txId","qPocketSignAndSendTx","error","console","log","success","startsWith","metaMaskSignTyped","tx","web3","get","Promise","resolve","reject","params","getTypedTx","method","currentProvider","sendAsync","err","result","undefined","bind","sendRawTx","txResp","getDeviceType","ua","navigator","userAgent","isWindowsPhone","test","isSymbian","isAndroid","isFireFox","isChrome","isTablet","isPhone","isPc","msgParams","type","name","gasLimit"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\r\nimport axios from 'axios';\r\n\r\n\r\naxios.defaults.baseURL = 'http://mainnet.quarkchain.io';\r\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\r\n\r\nasync function generateTx(to, data, value, from = null) {\r\n    if (from === null) {\r\n      from = this.address;\r\n    }\r\n    const transactionCountResp = await axios.post(\r\n      \"/getTransactionCount\",\r\n      { address: from },\r\n    );\r\n    const fromFullShardKey = \"0x\" + from.slice(-8);\r\n    let toRecipient;\r\n    let toFullShardKey;\r\n    if (to !== \"\") {\r\n      toRecipient = to.slice(0, 42);\r\n      toFullShardKey = \"0x\" + to.slice(42);\r\n    } else {\r\n      toRecipient = \"\";\r\n      toFullShardKey = fromFullShardKey;\r\n    }\r\n    const rawTx = {\r\n      nonce: transactionCountResp.data.transactionCount,\r\n      from: from.slice(0, 42),\r\n      to: toRecipient,\r\n      gasPrice: \"0x\" + (2).toString(16),\r\n      gas: \"0x\" + (350000).toString(16),\r\n      value: \"0x\" + value.toString(16),\r\n      data,\r\n      fromFullShardKey,\r\n      toFullShardKey,\r\n      networkId: `0x${(1).toString(16)}`,\r\n      gasTokenId: `0x${this.gasTokenId.toString(16)}`,\r\n      transferTokenId: `0x${this.transferTokenId.toString(16)}`,\r\n    }\r\n\r\n}\r\n\r\nasync function signAndSendTx(rawTx){\r\n    let txId = '';\r\n    try {\r\n        txId = await this.qPocketSignAndSendTx(rawTx);\r\n    } catch (error) {\r\n        console.log(\"error 404\")\r\n        return;\r\n    }\r\n\r\n    txId = txId;\r\n\r\n    const success = !!txId && !txId.startsWith('0x000000000000000000000000000000000000000');\r\n    if (success) {\r\n        //const url = (<a href=\"/tx/${txId}\">${txId}</a>);\r\n        console.log(`Successfully sent transaction ${txId}.`);\r\n        \r\n    } else {\r\n        console.log(\"Sending transaction failed\", 7000);\r\n    }\r\n}\r\n\r\nasync function metaMaskSignTyped(tx, web3, from) {\r\n    console.log(\"Awaiting MetaMask signature confirmation...\");\r\n    const transactionCountResp = await axios.get(\r\n      \"/networkInfo\"\r\n    );\r\n    console.log(transactionCountResp)\r\n    return new Promise(function(resolve,reject) {\r\n        var params = [getTypedTx(tx), from];\r\n        var method = 'eth_signTypedData';\r\n\r\n        web3.currentProvider.sendAsync({\r\n          method,\r\n          params,\r\n          from,\r\n        }, function (err, result) {\r\n          if(result.error !== undefined) {\r\n            console.log(\"It looks you declined the transaction in MetaMask\");\r\n            console.log(result.error);\r\n          }\r\n          resolve(result.result)\r\n        })\r\n    }.bind(this));\r\n  }\r\n\r\nasync function sendRawTx(rawTx) {\r\n  let txResp\r\n  console.log(\"test\")\r\n  try {\r\n    txResp = await axios.post(\"/sendRawTx\", {rawTx: rawTx, });\r\n    console.log(\"txResp: \" + txResp)\r\n  } catch(error) {\r\n    console.log(\"Sending transaction failed\")\r\n  }\r\n}\r\n\r\nfunction getDeviceType() {\r\n  var ua = navigator.userAgent,\r\n          isWindowsPhone = /(?:Windows Phone)/.test(ua),\r\n          isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone,\r\n          isAndroid = /(?:Android)/.test(ua),\r\n          isFireFox = /(?:Firefox)/.test(ua),\r\n          isChrome = /(?:Chrome|CriOS)/.test(ua),\r\n          isTablet = /(?:iPad|PlayBook)/.test(ua) || (isAndroid && !/(?:Mobile)/.test(ua)) || (isFireFox && /(?:Tablet)/.test(ua)),\r\n          isPhone = /(?:iPhone)/.test(ua) && !isTablet,\r\n          isPc = !isPhone && !isAndroid && !isSymbian;\r\n  return {\r\n    isPhone,\r\n    isPc\r\n  }\r\n}\r\n\r\nfunction getTypedTx(tx) {\r\n\r\n  let msgParams = [\r\n    {\r\n      type: 'uint256',\r\n      name: 'nonce',\r\n      value: `0x${tx.nonce.toString(16)}`\r\n    },\r\n    {\r\n      type: 'uint256',\r\n      name: 'gasPrice',\r\n      value: `0x${tx.gasPrice.toString(16)}`\r\n    },\r\n    {\r\n      type: 'uint256',\r\n      name: 'gasLimit',\r\n      value: `0x${tx.gasLimit.toString(16)}`\r\n    },\r\n    {\r\n      type: 'uint160',\r\n      name: 'to',\r\n      value: `${tx.to}`\r\n    },\r\n    {\r\n      type: 'uint256',\r\n      name: 'value',\r\n      value: `0x${tx.value.toString(16)}`\r\n    },\r\n    {\r\n      type: 'bytes',\r\n      name: 'data',\r\n      value: `0x${tx.data.toString(16)}`\r\n    },\r\n    {\r\n      type: 'uint256',\r\n      name: 'networkId',\r\n      value: '0x1'\r\n    },\r\n    {\r\n      type: 'uint32',\r\n      name: 'fromFullShardKey',\r\n      value: `${tx.fromFullShardKey}`\r\n    },\r\n    {\r\n      type: 'uint32',\r\n      name: 'toFullShardKey',\r\n      value: `${tx.toFullShardKey}`\r\n    },\r\n    {\r\n      type: 'uint64',\r\n      name: 'gasTokenId',\r\n      value: '0x8bb0'\r\n    },\r\n    {\r\n      \"type\": 'uint64',\r\n      \"name\": 'transferTokenId',\r\n      \"value\": '0x8bb0'\r\n    },\r\n    {\r\n      \"type\": 'string',\r\n      \"name\": 'qkcDomain',\r\n      \"value\": 'bottom-quark'\r\n    }\r\n  ];\r\n  console.log(msgParams)\r\n  return msgParams;\r\n}\r\n\r\nexport {metaMaskSignTyped, getTypedTx, getDeviceType, sendRawTx};"]},"metadata":{},"sourceType":"module"}