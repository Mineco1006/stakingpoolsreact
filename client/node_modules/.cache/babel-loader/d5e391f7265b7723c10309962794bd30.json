{"ast":null,"code":"'use strict'; // Modified [ethereumjs-tx](https://github.com/ethereumjs/ethereumjs-tx/blob/master/index.js)\n// to add shard-related fields.\n\nconst ethUtil = require('ethereumjs-util');\n\nconst rlp = require('rlp');\n\nconst fees = require('ethereum-common/params.json');\n\nconst BN = ethUtil.BN; // secp256k1n/2\n\nconst N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '0x00',\n *   gasPrice: '0x09184e72a000',\n *   gasLimit: '0x2710',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: '0x00',\n *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '0x1c',\n *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer\n *   containing the RLP serialized transaction or an array of buffers relating to each of the\n *   tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String,\n *   Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC recovery ID\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC signature parameter\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nclass Transaction {\n  constructor(data) {\n    data = data || {}; // Define Properties\n\n    const fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new Buffer([])\n    }, {\n      name: 'networkId',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'fromFullShardKey',\n      length: 4\n    }, {\n      name: 'toFullShardKey',\n      length: 4\n    }, {\n      name: 'gasTokenId',\n      length: 8,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'transferTokenId',\n      length: 8,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'version',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }];\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n\n    ethUtil.defineProperties(this, fields, data);\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically\n     *   derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    }); // calculate chainId from signature\n\n    const sigV = ethUtil.bufferToInt(this.v);\n    let chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0; // set chainId\n\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n\n\n  toCreationAddress() {\n    return this.to.toString('hex') === '';\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to include the signature\n   * @return {Buffer}\n   */\n\n\n  hash(includeSignature) {\n    if (includeSignature === undefined) {\n      includeSignature = true;\n    }\n\n    let items;\n\n    if (includeSignature) {\n      items = this.raw;\n      return this.txHash(items);\n    } // Excludes v, r, s and version.\n\n\n    items = this.raw.slice(0, 11);\n    return ethUtil.rlphash(items);\n  }\n\n  qkcHash() {\n    // Require signatures are present.\n    for (const sig of [this.r, this.s]) {\n      if (sig.toString() === '') {\n        throw new Error('cannot call qkcHash on unsigned tx');\n      }\n    }\n\n    const rlpResult = rlp.encode(this.raw);\n    let len = rlpResult.length;\n    const buf = new Buffer(5 + len);\n\n    for (let i = len + 4; i >= 0; i--) {\n      if (i < 5) {\n        buf[i] = len % 256;\n        len = Math.floor(len / 256);\n      } else {\n        buf[i] = rlpResult[i - 5];\n      }\n    }\n\n    buf[0] = 0;\n    return ethUtil.keccak(buf);\n  }\n  /**\n   * returns chain ID\n   * @return {Buffer}\n   */\n\n\n  getChainId() {\n    return this._chainId;\n  }\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n\n\n  getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n\n    const pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  }\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n\n    return this._senderPubKey;\n  }\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n\n\n  verifySignature() {\n    const msgHash = this.hash(false); // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      const v = ethUtil.bufferToInt(this.v);\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  }\n  /**\n   * sign a transaction with a given private key\n   * @param {Buffer} privateKey\n   */\n\n\n  sign(privateKey) {\n    const msgHash = this.hash(false);\n    const sig = ethUtil.ecsign(msgHash, privateKey);\n    Object.assign(this, sig);\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n\n\n  getDataFee() {\n    const data = this.raw[5];\n    const cost = new BN(0);\n\n    for (let i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n\n    return cost;\n  }\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n\n\n  getBaseFee() {\n    const fee = this.getDataFee().iaddn(fees.txGas.v);\n\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n\n    return fee;\n  }\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n\n\n  getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  }\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a description of why the\n   *   validation failed or return a Boolean\n   * @return {Boolean|String}\n   */\n\n\n  validate(stringError) {\n    const errors = [];\n\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push([`gas limit is too low. Need at least ${this.getBaseFee()}`]);\n    }\n\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    }\n\n    return errors.join(' ');\n  }\n\n}\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["C:/Users/Nico/documents/GitHub/quarkchainposwcontract/app/node_modules/quarkchain-web3/dist/quarkchain-ethereum-tx.js"],"names":["ethUtil","require","rlp","fees","BN","N_DIV_2","Transaction","constructor","data","fields","name","length","allowLess","default","Buffer","alias","allowZero","defineProperties","Object","defineProperty","enumerable","configurable","get","getSenderAddress","bind","sigV","bufferToInt","v","chainId","Math","floor","_chainId","_homestead","toCreationAddress","to","toString","hash","includeSignature","undefined","items","raw","txHash","slice","rlphash","qkcHash","sig","r","s","Error","rlpResult","encode","len","buf","i","keccak","getChainId","_from","pubkey","getSenderPublicKey","publicToAddress","_senderPubKey","verifySignature","msgHash","cmp","ecrecover","e","sign","privateKey","ecsign","assign","getDataFee","cost","iaddn","txDataZeroGas","txDataNonZeroGas","getBaseFee","fee","txGas","txCreation","getUpfrontCost","gasLimit","imul","gasPrice","iadd","value","validate","stringError","errors","push","join","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// Modified [ethereumjs-tx](https://github.com/ethereumjs/ethereumjs-tx/blob/master/index.js)\n// to add shard-related fields.\n\nconst ethUtil = require('ethereumjs-util');\nconst rlp = require('rlp');\nconst fees = require('ethereum-common/params.json');\n\nconst BN = ethUtil.BN;\n\n// secp256k1n/2\nconst N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '0x00',\n *   gasPrice: '0x09184e72a000',\n *   gasLimit: '0x2710',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: '0x00',\n *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '0x1c',\n *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer\n *   containing the RLP serialized transaction or an array of buffers relating to each of the\n *   tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String,\n *   Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC recovery ID\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC signature parameter\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nclass Transaction {\n  constructor(data) {\n    data = data || {};\n    // Define Properties\n    const fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new Buffer([])\n    }, {\n      name: 'networkId',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'fromFullShardKey',\n      length: 4\n    }, {\n      name: 'toFullShardKey',\n      length: 4\n    }, {\n      name: 'gasTokenId',\n      length: 8,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'transferTokenId',\n      length: 8,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'version',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }];\n\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n    ethUtil.defineProperties(this, fields, data);\n\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically\n     *   derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n\n    // calculate chainId from signature\n    const sigV = ethUtil.bufferToInt(this.v);\n    let chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0;\n\n    // set chainId\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n  toCreationAddress() {\n    return this.to.toString('hex') === '';\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to include the signature\n   * @return {Buffer}\n   */\n  hash(includeSignature) {\n    if (includeSignature === undefined) {\n      includeSignature = true;\n    }\n\n    let items;\n    if (includeSignature) {\n      items = this.raw;\n      return this.txHash(items);\n    }\n    // Excludes v, r, s and version.\n    items = this.raw.slice(0, 11);\n\n    return ethUtil.rlphash(items);\n  }\n\n  qkcHash() {\n    // Require signatures are present.\n    for (const sig of [this.r, this.s]) {\n      if (sig.toString() === '') {\n        throw new Error('cannot call qkcHash on unsigned tx');\n      }\n    }\n    const rlpResult = rlp.encode(this.raw);\n    let len = rlpResult.length;\n    const buf = new Buffer(5 + len);\n    for (let i = len + 4; i >= 0; i--) {\n      if (i < 5) {\n        buf[i] = len % 256;\n        len = Math.floor(len / 256);\n      } else {\n        buf[i] = rlpResult[i - 5];\n      }\n    }\n    buf[0] = 0;\n    return ethUtil.keccak(buf);\n  }\n\n  /**\n   * returns chain ID\n   * @return {Buffer}\n   */\n  getChainId() {\n    return this._chainId;\n  }\n\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n  getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n    const pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  }\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n  getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n    return this._senderPubKey;\n  }\n\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n  verifySignature() {\n    const msgHash = this.hash(false);\n    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      const v = ethUtil.bufferToInt(this.v);\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  }\n\n  /**\n   * sign a transaction with a given private key\n   * @param {Buffer} privateKey\n   */\n  sign(privateKey) {\n    const msgHash = this.hash(false);\n    const sig = ethUtil.ecsign(msgHash, privateKey);\n    Object.assign(this, sig);\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n  getDataFee() {\n    const data = this.raw[5];\n    const cost = new BN(0);\n    for (let i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n    return cost;\n  }\n\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n  getBaseFee() {\n    const fee = this.getDataFee().iaddn(fees.txGas.v);\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n    return fee;\n  }\n\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n  getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  }\n\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a description of why the\n   *   validation failed or return a Boolean\n   * @return {Boolean|String}\n   */\n  validate(stringError) {\n    const errors = [];\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push([`gas limit is too low. Need at least ${this.getBaseFee()}`]);\n    }\n\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    }\n    return errors.join(' ');\n  }\n}\n\nmodule.exports = Transaction;"]},"metadata":{},"sourceType":"script"}