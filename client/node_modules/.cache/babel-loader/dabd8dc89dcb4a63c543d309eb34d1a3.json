{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ethereumjsUtil = require('ethereumjs-util');\n\nvar _ethereumjsUtil2 = _interopRequireDefault(_ethereumjsUtil);\n\nvar _quarkchainEthereumTx = require('./quarkchain-ethereum-tx');\n\nvar _quarkchainEthereumTx2 = _interopRequireDefault(_quarkchainEthereumTx);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // QuarkChain client library built on web3.js\n//\n// Call QuarkChain.injectWeb3(web3, jrpcUrl) to inject qkc object.\n// The functions provided by the web3.qkc object mirror the corresponding ones in web3.eth.\n// One notable difference is that the qkc functions accepts QuarkChain address (48 hex chars).\n//\n// Available functions:\n//     getBalance: $QKC_ADDRESS\n//     getTransactionCount: $QKC_ADDRESS\n//     call: {to: $QKC_ADDRESS, ...}\n//     sendTransaction:\n//     {\n//       to: $QKC_ADDRESS,\n//       fromFullShardKey: $NUMBER,\n//       toFullShardKey: $NUMBER,\n//       ...\n//     }, nonce is fetched from network\n//     getTransactionReceipt: $TX_ID\n//     contract: $ABI\n//         new:\n//         at: $QKC_ADDRESS\n//\n// Example:\n//     QuarkChain.injectWeb3(web3, \"http://jrpc.quarkchain.io:38391\");\n//     const ethAddr = web3.eth.accounts[0];\n//     const qkcAddr = ethAddr + \"00000001\";  // Default to chain 0.\n//     web3.qkc.getBalance(qkcAddr).toString(10);\n//\n// Also for now this package needs `Web3` global variable from MetaMask, which means it can\n// only work in browser.\n\n\nlet Web3;\n/* eslint-disable */\n\nif (typeof window === 'undefined' || !window.Web3 || window.Web3.version && !window.Web3.version.api) {\n  // no Web3 or window.Web3 version 1.x\n  Web3 = require('web3');\n} else {\n  // window.Web3 version 0.20.x\n  Web3 = window.Web3;\n}\n/* eslint-enable */\n\n\nconst defaultTokenSetting = {\n  transferTokenId: '0x8bb0',\n  gasTokenId: '0x8bb0'\n};\n\nfunction assert(condition, msg) {\n  if (!condition) {\n    throw msg;\n  }\n}\n\nfunction getFullShardKeyFromQkcAddress(qkcAddress) {\n  assert(qkcAddress.length === 50, 'Invalid qkc address');\n  return `0x${qkcAddress.slice(-8)}`;\n}\n\nfunction getEthAddressFromQkcAddress(qkcAddress) {\n  assert(qkcAddress.length === 50, 'Invalid qkc address');\n  return qkcAddress.slice(0, 42);\n}\n\nfunction getTypedTx(tx) {\n  const msgParams = [{\n    type: 'uint256',\n    name: 'nonce',\n    value: `0x${tx.nonce.toString('hex')}`\n  }, {\n    type: 'uint256',\n    name: 'gasPrice',\n    value: `0x${tx.gasPrice.toString('hex')}`\n  }, {\n    type: 'uint256',\n    name: 'gasLimit',\n    value: `0x${tx.gasLimit.toString('hex')}`\n  }, {\n    type: 'uint160',\n    name: 'to',\n    value: `0x${tx.to.toString('hex')}`\n  }, {\n    type: 'uint256',\n    name: 'value',\n    value: `0x${tx.value.toString('hex')}`\n  }, {\n    type: 'bytes',\n    name: 'data',\n    value: `0x${tx.data.toString('hex')}`\n  }, {\n    type: 'uint256',\n    name: 'networkId',\n    value: `0x${tx.networkId.toString('hex')}`\n  }, {\n    type: 'uint32',\n    name: 'fromFullShardKey',\n    value: `0x${tx.fromFullShardKey.toString('hex')}`\n  }, {\n    type: 'uint32',\n    name: 'toFullShardKey',\n    value: `0x${tx.toFullShardKey.toString('hex')}`\n  }, {\n    type: 'uint64',\n    name: 'gasTokenId',\n    value: `0x${tx.gasTokenId.toString('hex')}`\n  }, {\n    type: 'uint64',\n    name: 'transferTokenId',\n    value: `0x${tx.transferTokenId.toString('hex')}`\n  }, {\n    type: 'string',\n    name: 'qkcDomain',\n    value: 'bottom-quark'\n  }];\n  return msgParams;\n}\n\nasync function metaMaskSignTyped(from, web3in, tx) {\n  return new Promise((resolve, reject) => {\n    const params = [getTypedTx(tx), from];\n    const method = 'eth_signTypedData';\n    web3in.currentProvider.sendAsync({\n      method,\n      params,\n      from\n    }, (err, result) => {\n      if (err) {\n        return reject(err);\n      }\n\n      if (result.error !== undefined) {\n        return reject(result.error);\n      }\n\n      return resolve(result.result);\n    });\n  });\n}\n\nfunction decodeSignature(sig) {\n  const ret = {};\n  const signature = sig.slice(2);\n  ret.r = _ethereumjsUtil2.default.toBuffer(`0x${signature.slice(0, 64)}`);\n  ret.s = _ethereumjsUtil2.default.toBuffer(`0x${signature.slice(64, 128)}`);\n  ret.v = _ethereumjsUtil2.default.toBuffer(`0x${signature.slice(128, 130)}`);\n  return ret;\n}\n\nfunction loadContract(abi, contractAddress, web3in, web3http) {\n  const web3contract = new Web3(web3http.currentProvider); // Override call and sendTransaction to include full shard id\n\n  web3contract.eth.call = (obj, blockId, callback) => {\n    const ret = web3in.qkc.call(Object.assign({}, obj, {\n      to: contractAddress\n    }), callback);\n    return ret;\n  };\n\n  web3contract.eth.sendTransaction = async (obj, callback) => {\n    const ret = await web3in.qkc.sendTransaction(Object.assign({}, obj, {\n      to: contractAddress\n    }), callback);\n    return ret;\n  };\n\n  return web3contract.eth.contract(abi).at(contractAddress.slice(0, 42));\n}\n\nexports.default = {\n  getFullShardKeyFromQkcAddress,\n  getEthAddressFromQkcAddress,\n\n  injectWeb3(web3in, jrpcUrl) {\n    // Inject QuarkChain specific logic into the provided web3 instance.\n    //\n    // The web3 instance passed in will be used for account management and signing transactions.\n    // It should have a provider implementing RPC eth_signTypedData (https://github.com/ethereum/EIPs/pull/712)\n    // Normally you should just pass in a web3 instance with provider from MetaMask.\n    //\n    // Args:\n    //     web3in: web3 instance\n    //     jrpcUrl: QuarkChain JSON RPC endpoint (e.g., http://localhost:38391)\n    const web3http = new Web3(new Web3.providers.HttpProvider(jrpcUrl));\n    let web3eth;\n\n    if (web3in.version && !web3in.version.api) {\n      // web3in version 1.x\n      web3eth = new Web3(web3in.currentProvider).eth;\n    } else {\n      web3eth = web3in.eth;\n    }\n\n    Object.defineProperty(web3in, 'qkc', {\n      value: {\n        getBalance(qkcAddress, callback) {\n          const ethAddress = getEthAddressFromQkcAddress(qkcAddress);\n          const shard = getFullShardKeyFromQkcAddress(qkcAddress);\n          return web3http.eth.getBalance(ethAddress, shard, callback);\n        },\n\n        getTransactionCount(qkcAddress, callback) {\n          const ethAddress = getEthAddressFromQkcAddress(qkcAddress);\n          const shard = getFullShardKeyFromQkcAddress(qkcAddress);\n          return web3http.eth.getTransactionCount(ethAddress, shard, callback);\n        },\n\n        call(obj, callback) {\n          const qkcAddress = obj.to;\n          const rawTx = Object.assign({}, obj, {\n            to: getEthAddressFromQkcAddress(qkcAddress)\n          });\n          const shard = getFullShardKeyFromQkcAddress(qkcAddress);\n          return web3http.eth.call(rawTx, shard, callback);\n        },\n\n        setPrivateKey(privateKey) {\n          if (privateKey.length !== 66) {\n            throw new Error('Invalid key');\n          }\n\n          this.key = privateKey;\n          this.address = `0x${_ethereumjsUtil2.default.privateToAddress(_ethereumjsUtil2.default.toBuffer(privateKey)).toString('hex')}`;\n        },\n\n        unsetPrivateKey() {\n          this.key = null;\n          this.address = null;\n        },\n\n        async sendTransaction(obj, callback) {\n          let fromEthAddress;\n\n          if (this.address) {\n            fromEthAddress = this.address;\n          } else {\n            fromEthAddress = web3eth.accounts[0];\n          }\n\n          if (obj.fromFullShardKey === undefined || obj.toFullShardKey === undefined) {\n            throw new Error('`fromFullShardKey` and `toFullShardKey` are required');\n          }\n\n          const rawTx = Object.assign({}, defaultTokenSetting, obj);\n\n          if (obj.to !== undefined) {\n            if (obj.to.length === 42) {\n              rawTx.to = obj.to;\n            } else {\n              rawTx.to = getEthAddressFromQkcAddress(obj.to);\n\n              if (getFullShardKeyFromQkcAddress(obj.to) !== obj.toFullShardKey) {\n                throw new Error('Target shard key mismatch');\n              }\n            }\n          } // FIXME: make this async\n\n\n          if (rawTx.nonce == undefined) {\n            // eslint-disable-line\n            rawTx.nonce = web3http.eth.getTransactionCount(fromEthAddress, rawTx.fromFullShardKey);\n          }\n\n          if (!rawTx.networkId) {\n            // default network is devnet\n            rawTx.networkId = '0xff';\n          } // rawTx.version is part of transaction sent to QuarkChain Network but not part of\n          // signature it determines the signature version:\n          //    '0x0' RLP-encoded transaction of all fields in Transaction (minus version, v, r, s)\n          //    '0x1' typed encoding matching MetaMask initial implementation of EIP-712\n\n\n          rawTx.version = '0x1';\n          const tx = new _quarkchainEthereumTx2.default(rawTx);\n\n          if (this.key) {\n            // sign with a key\n            tx.version = '0x0';\n            tx.sign(_ethereumjsUtil2.default.toBuffer(this.key));\n          } else {\n            const from = web3eth.accounts[0];\n            const sig = await metaMaskSignTyped(from, web3in, tx);\n            Object.assign(tx, decodeSignature(sig));\n          }\n\n          const payload = `0x${tx.serialize().toString('hex')}`;\n          return web3http.eth.sendRawTransaction(payload, callback);\n        },\n\n        getTransactionReceipt: web3http.eth.getTransactionReceipt,\n\n        getCode(qkcAddress, callback) {\n          const ethAddress = getEthAddressFromQkcAddress(qkcAddress);\n          const shard = getFullShardKeyFromQkcAddress(qkcAddress);\n          return web3http.eth.getCode(ethAddress, shard, callback);\n        },\n\n        contract(abi) {\n          const contractFactory = web3eth.contract(abi);\n          const originalFactory = web3eth.contract(abi);\n\n          contractFactory.at = addr => loadContract(abi, addr, web3in, web3http);\n\n          contractFactory.new = (...args) => {\n            const size = args.length;\n            const callback = args[size - 1];\n            const newArguments = [...args.slice(0, -1)];\n            return originalFactory.new(...newArguments, (err, contract) => {\n              if (!contract) {\n                callback(err, contract);\n              }\n\n              if (!contract.address) {\n                // The transactionHash returned from eth_sendRawTransaction is already a tx id\n                contract.transactionId = contract.transactionHash; // eslint-disable-line\n              }\n\n              callback(err, contract);\n            });\n          };\n\n          contractFactory.new.getData = originalFactory.new.getData;\n          return contractFactory;\n        }\n\n      }\n    }); // Override to support `contract.new`\n\n    web3in.eth.sendTransaction = web3in.qkc.sendTransaction.bind(web3in.qkc); // eslint-disable-line\n\n    web3in.eth.getTransactionReceipt = web3in.qkc.getTransactionReceipt; // eslint-disable-line\n\n    web3in.eth.getCode = web3in.qkc.getCode; // eslint-disable-line\n  }\n\n};\nmodule.exports = exports['default'];","map":{"version":3,"sources":["C:/Users/Nico/Documents/GitHub/stakingpoolsreact/node_modules/quarkchain-web3/dist/index.js"],"names":["Object","defineProperty","exports","value","_ethereumjsUtil","require","_ethereumjsUtil2","_interopRequireDefault","_quarkchainEthereumTx","_quarkchainEthereumTx2","obj","__esModule","default","Web3","window","version","api","defaultTokenSetting","transferTokenId","gasTokenId","assert","condition","msg","getFullShardKeyFromQkcAddress","qkcAddress","length","slice","getEthAddressFromQkcAddress","getTypedTx","tx","msgParams","type","name","nonce","toString","gasPrice","gasLimit","to","data","networkId","fromFullShardKey","toFullShardKey","metaMaskSignTyped","from","web3in","Promise","resolve","reject","params","method","currentProvider","sendAsync","err","result","error","undefined","decodeSignature","sig","ret","signature","r","toBuffer","s","v","loadContract","abi","contractAddress","web3http","web3contract","eth","call","blockId","callback","qkc","assign","sendTransaction","contract","at","injectWeb3","jrpcUrl","providers","HttpProvider","web3eth","getBalance","ethAddress","shard","getTransactionCount","rawTx","setPrivateKey","privateKey","Error","key","address","privateToAddress","unsetPrivateKey","fromEthAddress","accounts","sign","payload","serialize","sendRawTransaction","getTransactionReceipt","getCode","contractFactory","originalFactory","addr","new","args","size","newArguments","transactionId","transactionHash","getData","bind","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ethereumjsUtil = require('ethereumjs-util');\n\nvar _ethereumjsUtil2 = _interopRequireDefault(_ethereumjsUtil);\n\nvar _quarkchainEthereumTx = require('./quarkchain-ethereum-tx');\n\nvar _quarkchainEthereumTx2 = _interopRequireDefault(_quarkchainEthereumTx);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// QuarkChain client library built on web3.js\n//\n// Call QuarkChain.injectWeb3(web3, jrpcUrl) to inject qkc object.\n// The functions provided by the web3.qkc object mirror the corresponding ones in web3.eth.\n// One notable difference is that the qkc functions accepts QuarkChain address (48 hex chars).\n//\n// Available functions:\n//     getBalance: $QKC_ADDRESS\n//     getTransactionCount: $QKC_ADDRESS\n//     call: {to: $QKC_ADDRESS, ...}\n//     sendTransaction:\n//     {\n//       to: $QKC_ADDRESS,\n//       fromFullShardKey: $NUMBER,\n//       toFullShardKey: $NUMBER,\n//       ...\n//     }, nonce is fetched from network\n//     getTransactionReceipt: $TX_ID\n//     contract: $ABI\n//         new:\n//         at: $QKC_ADDRESS\n//\n// Example:\n//     QuarkChain.injectWeb3(web3, \"http://jrpc.quarkchain.io:38391\");\n//     const ethAddr = web3.eth.accounts[0];\n//     const qkcAddr = ethAddr + \"00000001\";  // Default to chain 0.\n//     web3.qkc.getBalance(qkcAddr).toString(10);\n//\n// Also for now this package needs `Web3` global variable from MetaMask, which means it can\n// only work in browser.\n\nlet Web3;\n/* eslint-disable */\nif (typeof window === 'undefined' || !window.Web3 || window.Web3.version && !window.Web3.version.api) {\n  // no Web3 or window.Web3 version 1.x\n  Web3 = require('web3');\n} else {\n  // window.Web3 version 0.20.x\n  Web3 = window.Web3;\n}\n/* eslint-enable */\n\nconst defaultTokenSetting = {\n  transferTokenId: '0x8bb0',\n  gasTokenId: '0x8bb0'\n};\n\nfunction assert(condition, msg) {\n  if (!condition) {\n    throw msg;\n  }\n}\n\nfunction getFullShardKeyFromQkcAddress(qkcAddress) {\n  assert(qkcAddress.length === 50, 'Invalid qkc address');\n  return `0x${qkcAddress.slice(-8)}`;\n}\n\nfunction getEthAddressFromQkcAddress(qkcAddress) {\n  assert(qkcAddress.length === 50, 'Invalid qkc address');\n  return qkcAddress.slice(0, 42);\n}\n\nfunction getTypedTx(tx) {\n  const msgParams = [{\n    type: 'uint256',\n    name: 'nonce',\n    value: `0x${tx.nonce.toString('hex')}`\n  }, {\n    type: 'uint256',\n    name: 'gasPrice',\n    value: `0x${tx.gasPrice.toString('hex')}`\n  }, {\n    type: 'uint256',\n    name: 'gasLimit',\n    value: `0x${tx.gasLimit.toString('hex')}`\n  }, {\n    type: 'uint160',\n    name: 'to',\n    value: `0x${tx.to.toString('hex')}`\n  }, {\n    type: 'uint256',\n    name: 'value',\n    value: `0x${tx.value.toString('hex')}`\n  }, {\n    type: 'bytes',\n    name: 'data',\n    value: `0x${tx.data.toString('hex')}`\n  }, {\n    type: 'uint256',\n    name: 'networkId',\n    value: `0x${tx.networkId.toString('hex')}`\n  }, {\n    type: 'uint32',\n    name: 'fromFullShardKey',\n    value: `0x${tx.fromFullShardKey.toString('hex')}`\n  }, {\n    type: 'uint32',\n    name: 'toFullShardKey',\n    value: `0x${tx.toFullShardKey.toString('hex')}`\n  }, {\n    type: 'uint64',\n    name: 'gasTokenId',\n    value: `0x${tx.gasTokenId.toString('hex')}`\n  }, {\n    type: 'uint64',\n    name: 'transferTokenId',\n    value: `0x${tx.transferTokenId.toString('hex')}`\n  }, {\n    type: 'string',\n    name: 'qkcDomain',\n    value: 'bottom-quark'\n  }];\n  return msgParams;\n}\n\nasync function metaMaskSignTyped(from, web3in, tx) {\n  return new Promise((resolve, reject) => {\n    const params = [getTypedTx(tx), from];\n    const method = 'eth_signTypedData';\n    web3in.currentProvider.sendAsync({\n      method,\n      params,\n      from\n    }, (err, result) => {\n      if (err) {\n        return reject(err);\n      }\n      if (result.error !== undefined) {\n        return reject(result.error);\n      }\n      return resolve(result.result);\n    });\n  });\n}\n\nfunction decodeSignature(sig) {\n  const ret = {};\n  const signature = sig.slice(2);\n  ret.r = _ethereumjsUtil2.default.toBuffer(`0x${signature.slice(0, 64)}`);\n  ret.s = _ethereumjsUtil2.default.toBuffer(`0x${signature.slice(64, 128)}`);\n  ret.v = _ethereumjsUtil2.default.toBuffer(`0x${signature.slice(128, 130)}`);\n  return ret;\n}\n\nfunction loadContract(abi, contractAddress, web3in, web3http) {\n  const web3contract = new Web3(web3http.currentProvider);\n\n  // Override call and sendTransaction to include full shard id\n  web3contract.eth.call = (obj, blockId, callback) => {\n    const ret = web3in.qkc.call(Object.assign({}, obj, { to: contractAddress }), callback);\n    return ret;\n  };\n\n  web3contract.eth.sendTransaction = async (obj, callback) => {\n    const ret = await web3in.qkc.sendTransaction(Object.assign({}, obj, { to: contractAddress }), callback);\n    return ret;\n  };\n  return web3contract.eth.contract(abi).at(contractAddress.slice(0, 42));\n}\n\nexports.default = {\n  getFullShardKeyFromQkcAddress,\n\n  getEthAddressFromQkcAddress,\n\n  injectWeb3(web3in, jrpcUrl) {\n    // Inject QuarkChain specific logic into the provided web3 instance.\n    //\n    // The web3 instance passed in will be used for account management and signing transactions.\n    // It should have a provider implementing RPC eth_signTypedData (https://github.com/ethereum/EIPs/pull/712)\n    // Normally you should just pass in a web3 instance with provider from MetaMask.\n    //\n    // Args:\n    //     web3in: web3 instance\n    //     jrpcUrl: QuarkChain JSON RPC endpoint (e.g., http://localhost:38391)\n    const web3http = new Web3(new Web3.providers.HttpProvider(jrpcUrl));\n\n    let web3eth;\n    if (web3in.version && !web3in.version.api) {\n      // web3in version 1.x\n      web3eth = new Web3(web3in.currentProvider).eth;\n    } else {\n      web3eth = web3in.eth;\n    }\n\n    Object.defineProperty(web3in, 'qkc', {\n      value: {\n        getBalance(qkcAddress, callback) {\n          const ethAddress = getEthAddressFromQkcAddress(qkcAddress);\n          const shard = getFullShardKeyFromQkcAddress(qkcAddress);\n          return web3http.eth.getBalance(ethAddress, shard, callback);\n        },\n\n        getTransactionCount(qkcAddress, callback) {\n          const ethAddress = getEthAddressFromQkcAddress(qkcAddress);\n          const shard = getFullShardKeyFromQkcAddress(qkcAddress);\n          return web3http.eth.getTransactionCount(ethAddress, shard, callback);\n        },\n\n        call(obj, callback) {\n          const qkcAddress = obj.to;\n          const rawTx = Object.assign({}, obj, {\n            to: getEthAddressFromQkcAddress(qkcAddress)\n          });\n          const shard = getFullShardKeyFromQkcAddress(qkcAddress);\n          return web3http.eth.call(rawTx, shard, callback);\n        },\n\n        setPrivateKey(privateKey) {\n          if (privateKey.length !== 66) {\n            throw new Error('Invalid key');\n          }\n          this.key = privateKey;\n          this.address = `0x${_ethereumjsUtil2.default.privateToAddress(_ethereumjsUtil2.default.toBuffer(privateKey)).toString('hex')}`;\n        },\n\n        unsetPrivateKey() {\n          this.key = null;\n          this.address = null;\n        },\n\n        async sendTransaction(obj, callback) {\n          let fromEthAddress;\n          if (this.address) {\n            fromEthAddress = this.address;\n          } else {\n            fromEthAddress = web3eth.accounts[0];\n          }\n          if (obj.fromFullShardKey === undefined || obj.toFullShardKey === undefined) {\n            throw new Error('`fromFullShardKey` and `toFullShardKey` are required');\n          }\n\n          const rawTx = Object.assign({}, defaultTokenSetting, obj);\n          if (obj.to !== undefined) {\n            if (obj.to.length === 42) {\n              rawTx.to = obj.to;\n            } else {\n              rawTx.to = getEthAddressFromQkcAddress(obj.to);\n              if (getFullShardKeyFromQkcAddress(obj.to) !== obj.toFullShardKey) {\n                throw new Error('Target shard key mismatch');\n              }\n            }\n          }\n\n          // FIXME: make this async\n          if (rawTx.nonce == undefined) {\n            // eslint-disable-line\n            rawTx.nonce = web3http.eth.getTransactionCount(fromEthAddress, rawTx.fromFullShardKey);\n          }\n          if (!rawTx.networkId) {\n            // default network is devnet\n            rawTx.networkId = '0xff';\n          }\n          // rawTx.version is part of transaction sent to QuarkChain Network but not part of\n          // signature it determines the signature version:\n          //    '0x0' RLP-encoded transaction of all fields in Transaction (minus version, v, r, s)\n          //    '0x1' typed encoding matching MetaMask initial implementation of EIP-712\n          rawTx.version = '0x1';\n\n          const tx = new _quarkchainEthereumTx2.default(rawTx);\n\n          if (this.key) {\n            // sign with a key\n            tx.version = '0x0';\n            tx.sign(_ethereumjsUtil2.default.toBuffer(this.key));\n          } else {\n            const from = web3eth.accounts[0];\n            const sig = await metaMaskSignTyped(from, web3in, tx);\n            Object.assign(tx, decodeSignature(sig));\n          }\n          const payload = `0x${tx.serialize().toString('hex')}`;\n          return web3http.eth.sendRawTransaction(payload, callback);\n        },\n\n        getTransactionReceipt: web3http.eth.getTransactionReceipt,\n\n        getCode(qkcAddress, callback) {\n          const ethAddress = getEthAddressFromQkcAddress(qkcAddress);\n          const shard = getFullShardKeyFromQkcAddress(qkcAddress);\n          return web3http.eth.getCode(ethAddress, shard, callback);\n        },\n\n        contract(abi) {\n          const contractFactory = web3eth.contract(abi);\n          const originalFactory = web3eth.contract(abi);\n          contractFactory.at = addr => loadContract(abi, addr, web3in, web3http);\n          contractFactory.new = (...args) => {\n            const size = args.length;\n            const callback = args[size - 1];\n            const newArguments = [...args.slice(0, -1)];\n            return originalFactory.new(...newArguments, (err, contract) => {\n              if (!contract) {\n                callback(err, contract);\n              }\n              if (!contract.address) {\n                // The transactionHash returned from eth_sendRawTransaction is already a tx id\n                contract.transactionId = contract.transactionHash; // eslint-disable-line\n              }\n              callback(err, contract);\n            });\n          };\n          contractFactory.new.getData = originalFactory.new.getData;\n          return contractFactory;\n        }\n      }\n    });\n\n    // Override to support `contract.new`\n    web3in.eth.sendTransaction = web3in.qkc.sendTransaction.bind(web3in.qkc); // eslint-disable-line\n    web3in.eth.getTransactionReceipt = web3in.qkc.getTransactionReceipt; // eslint-disable-line\n    web3in.eth.getCode = web3in.qkc.getCode; // eslint-disable-line\n  }\n};\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}