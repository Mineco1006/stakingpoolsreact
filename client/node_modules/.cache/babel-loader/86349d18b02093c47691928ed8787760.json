{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nico\\\\Documents\\\\GitHub\\\\quarkchainposwapp\\\\app\\\\src\\\\App.js\";\nimport './App.css';\nimport axios from 'axios';\nimport Web3 from 'web3';\nimport QuarkChain from 'quarkchain-web3';\nimport { useEffect, useState } from 'react'; //import Aync from 'react-async';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet web3;\nlet address;\nconst poolContractAddress = \"0x006631C067D34928F55520511f01A5aBfA0AC67a\";\nconst fullShardKey = \"0003c66C\";\nconst jrpcUrl = \"http://jrpc.mainnet.quarkchain.io:38391\";\nconst [userInformation, setUserInformation] = useState({});\nuseEffect(() => {\n  getUserInformation().then(data => setUserInformation(data));\n}, []);\n\nif (window.ethereum) {\n  web3 = new Web3(window.ethereum);\n  QuarkChain.injectWeb3(web3, jrpcUrl);\n  window.ethereum.enable();\n  getUserInformation().address.then(data => console.log(data));\n}\n\nfunction App() {\n  console.log(\"hi\");\n  console.log(\"address: \" + address);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"QKC Chain3 staking pool\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), \"Address: \", userInformation.address]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\n\nfunction sendTransaction(address, value) {\n  let rawTx = {\n    to: poolContractAddress,\n    fromFullShardKey: \"0x\" + fullShardKey,\n    toFullShardKey: \"0x\" + fullShardKey,\n    gas: String(500000).toString(\"hex\"),\n    gasPrice: String\n  };\n}\n\nfunction getBalance() {\n  web3.qkc.getBalance(poolContractAddress + fullShardKey, function (err, res) {\n    console.log(res.c[1]);\n    return res / 10 ** 18;\n  });\n}\n\nasync function getUserInformation() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        address: web3.eth.getAccounts()[0]\n      });\n    }, 10000);\n  });\n  /*let address1 = await web3.eth.getAccounts();\n  address = address1[0];\n  console.log(address)*/\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Nico/Documents/GitHub/quarkchainposwapp/app/src/App.js"],"names":["axios","Web3","QuarkChain","useEffect","useState","web3","address","poolContractAddress","fullShardKey","jrpcUrl","userInformation","setUserInformation","getUserInformation","then","data","window","ethereum","injectWeb3","enable","console","log","App","sendTransaction","value","rawTx","to","fromFullShardKey","toFullShardKey","gas","String","toString","gasPrice","getBalance","qkc","err","res","c","Promise","resolve","setTimeout","eth","getAccounts"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CACA;;;AAEA,IAAIC,IAAJ;AACA,IAAIC,OAAJ;AAEA,MAAMC,mBAAmB,GAAG,4CAA5B;AACA,MAAMC,YAAY,GAAG,UAArB;AACA,MAAMC,OAAO,GAAG,yCAAhB;AAEA,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,EAAD,CAAtD;AAEAD,SAAS,CAAC,MAAM;AACdS,EAAAA,kBAAkB,GAAGC,IAArB,CAA0BC,IAAI,IAAIH,kBAAkB,CAACG,IAAD,CAApD;AACD,CAFQ,EAEN,EAFM,CAAT;;AAIA,IAAGC,MAAM,CAACC,QAAV,EAAmB;AACjBX,EAAAA,IAAI,GAAG,IAAIJ,IAAJ,CAASc,MAAM,CAACC,QAAhB,CAAP;AACAd,EAAAA,UAAU,CAACe,UAAX,CAAsBZ,IAAtB,EAA4BI,OAA5B;AACAM,EAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB;AACAN,EAAAA,kBAAkB,GAAGN,OAArB,CAA6BO,IAA7B,CAAkCC,IAAI,IAAIK,OAAO,CAACC,GAAR,CAAYN,IAAZ,CAA1C;AACD;;AAED,SAASO,GAAT,GAAe;AACbF,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAcd,OAA1B;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEYI,eAAe,CAACJ,OAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KAXQe,G;;AAaT,SAASC,eAAT,CAAyBhB,OAAzB,EAAkCiB,KAAlC,EAAyC;AACvC,MAAIC,KAAK,GAAG;AACVC,IAAAA,EAAE,EAAElB,mBADM;AAEVmB,IAAAA,gBAAgB,EAAE,OAAKlB,YAFb;AAGVmB,IAAAA,cAAc,EAAE,OAAKnB,YAHX;AAIVoB,IAAAA,GAAG,EAAEC,MAAM,CAAC,MAAD,CAAN,CAAeC,QAAf,CAAwB,KAAxB,CAJK;AAKVC,IAAAA,QAAQ,EAAEF;AALA,GAAZ;AAQD;;AAED,SAASG,UAAT,GAAsB;AACpB3B,EAAAA,IAAI,CAAC4B,GAAL,CAASD,UAAT,CAAoBzB,mBAAmB,GAAGC,YAA1C,EAAwD,UAAS0B,GAAT,EAAcC,GAAd,EAAmB;AACzEhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,GAAG,CAACC,CAAJ,CAAM,CAAN,CAAZ;AACA,WAAOD,GAAG,GAAC,MAAI,EAAf;AACD,GAHD;AAID;;AACD,eAAevB,kBAAf,GAAoC;AAClC,SAAO,IAAIyB,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAAC;AACNhC,QAAAA,OAAO,EAAED,IAAI,CAACmC,GAAL,CAASC,WAAT,GAAuB,CAAvB;AADH,OAAD,CAAP;AAGD,KAJS,EAIP,KAJO,CAAV;AAKD,GANM,CAAP;AAOA;AACF;AACA;AACC;;AAED,eAAepB,GAAf","sourcesContent":["import './App.css';\nimport axios from 'axios';\nimport Web3 from 'web3';\nimport QuarkChain from 'quarkchain-web3';\nimport { useEffect, useState } from 'react';\n//import Aync from 'react-async';\n\nlet web3;\nlet address;\n\nconst poolContractAddress = \"0x006631C067D34928F55520511f01A5aBfA0AC67a\";\nconst fullShardKey = \"0003c66C\"\nconst jrpcUrl = \"http://jrpc.mainnet.quarkchain.io:38391\";\n\nconst [userInformation, setUserInformation] = useState({});\n\nuseEffect(() => {\n  getUserInformation().then(data => setUserInformation(data));\n}, [])\n\nif(window.ethereum){\n  web3 = new Web3(window.ethereum);\n  QuarkChain.injectWeb3(web3, jrpcUrl);\n  window.ethereum.enable();\n  getUserInformation().address.then(data => console.log(data))\n}\n\nfunction App() {\n  console.log(\"hi\")\n  console.log(\"address: \" + address)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>QKC Chain3 staking pool</h2>\n        Address: {userInformation.address}\n      </header>\n    </div>\n  );\n}\n\nfunction sendTransaction(address, value) {\n  let rawTx = {\n    to: poolContractAddress,\n    fromFullShardKey: \"0x\"+fullShardKey,\n    toFullShardKey: \"0x\"+fullShardKey,\n    gas: String(500000).toString(\"hex\"),\n    gasPrice: String\n  }\n  \n}\n\nfunction getBalance() {\n  web3.qkc.getBalance(poolContractAddress + fullShardKey, function(err, res) {\n    console.log(res.c[1])\n    return res/10**18\n  });\n}\nasync function getUserInformation() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        address: web3.eth.getAccounts()[0]\n      })\n    }, 10000)\n  })\n  /*let address1 = await web3.eth.getAccounts();\n  address = address1[0];\n  console.log(address)*/\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}